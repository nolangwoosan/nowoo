generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:1234@localhost:3306/test"
}

model Item {
  item_idx         Int           @id @default(autoincrement())
  maple_item_id    Int
  name_kor         String        @db.LongText
  name_eng         String        @db.LongText
  description_kor  String
  description_eng  String
  overall_category String        @db.LongText
  category         String        @db.LongText
  sub_category     String        @db.LongText
  req_level        Int
  req_str          Int
  req_dex          Int
  req_int          Int
  req_luk          Int
  req_pop          Int
  req_job          Int
  upgradable_count Int
  inc_ph_attack    Int
  inc_mg_attack    Int
  inc_ph_defence   Int
  inc_mg_defence   Int
  inc_str          Int
  inc_dex          Int
  inc_int          Int
  inc_luk          Int
  inc_hp           Int
  inc_mp           Int
  opt_etc          String?       @db.LongText
  price_shop       Int
  price_average    Int
  views            BigInt        @default(0)
  monster_drops    MonsterDrop[]
  createdDt        DateTime      @default(now()) @map("created_dt")
  updatedDt        DateTime      @updatedAt @map("updated_dt")
  deletedDt        DateTime?     @map("deleted_dt")

  @@map("items")
}

model MonsterDrop {
  id          Int     @id @default(autoincrement())
  monster_id  Int
  item_id     Int
  drop_chance String
  items       Item    @relation(fields: [item_id], references: [item_idx])
  monsters    Monster @relation(fields: [monster_id], references: [id])

  @@map("monster_drops")
}

model Monster {
  id                Int           @id @default(autoincrement())
  maple_mob_id      Int
  name_kor          String
  name_eng          String
  description_kor   String
  description_eng   String
  level             Int
  hp                Int
  mp                Int
  exp               Int
  ph_attack         Int
  mg_attack         Int
  ph_defence        Int
  mg_defence        Int
  is_undead         Boolean
  drop_money        Int
  drop_money_chance String
  createdDt         DateTime      @default(now()) @map("created_dt")
  updatedDt         DateTime      @updatedAt @map("updated_dt")
  deletedDt         DateTime?     @map("deleted_dt")
  views             BigInt        @default(0)
  monster_drops     MonsterDrop[]

  @@map("monsters")
}

model User {
  userIdx       Int       @id @default(autoincrement()) @map("user_idx")
  email         String    @unique
  gameNick      String    @unique @map("game_nick")
  gameTcNick    String    @map("game_tc_nick")
  gameLevel     Int       @default(0) @map("game_level")
  gameJob       String    @default("초보자") @map("game_job")
  password      String
  role          Int       @default(0)
  coin          Int       @default(0)
  joinedParties Party[]
  comments      Comment[]
  posts         Board[]
  createdDt     DateTime  @default(now()) @map("created_dt")
  updatedDt     DateTime  @updatedAt @map("updated_dt")
  deletedDt     DateTime? @map("deleted_dt")

  @@map("users")
}

model Letter {
  letterIdx Int       @id @default(autoincrement()) @map("letter_idx")
  content   String    @db.LongText
  from      Int
  to        Int
  coin      Int       @default(0)
  is_read   Boolean   @default(false)
  createdDt DateTime  @default(now()) @map("created_dt")
  deletedDt DateTime? @map("deleted_dt")

  @@map("letters")
}

model Party {
  partyIdx         Int       @id @default(autoincrement()) @map("party_idx")
  categoryId       Int
  description      String    @db.LongText
  recruiterId      Int       @map("recruiter_id")
  peopleLimit      Int       @default(2) @map("people_limit")
  levelLimit       Int       @default(0) @map("level_limit")
  participants     User[]
  recruitStartTime DateTime  @default(now()) @map("recruit_st_time")
  recruitEndTime   DateTime  @map("recruit_ed_time")
  isEnd            Boolean   @default(false)
  views            BigInt    @default(0)
  createdDt        DateTime  @default(now()) @map("created_dt")
  updatedDt        DateTime  @updatedAt @map("updated_dt")
  deletedDt        DateTime? @map("deleted_dt")

  @@map("parties")
}

model PartyCategory {
  ptCategoryIdx Int    @id @default(autoincrement()) @map("pt_category_idx")
  name          String
  location      String

  @@map("party_category")
}

model Board {
  boardIdx    Int       @id @default(autoincrement()) @map("board_idx")
  title       String
  description String    @db.LongText
  writer      User      @relation(fields: [writerId], references: [userIdx])
  writerId    Int       @map("writer_id")
  category    Int
  commnets    Comment[]
  views       BigInt    @default(0)
  createdDt   DateTime  @default(now()) @map("created_dt")
  updatedDt   DateTime  @updatedAt @map("updated_dt")
  deletedDt   DateTime? @map("deleted_dt")

  @@map("boards")
}

model Comment {
  commentIdx      Int       @id @default(autoincrement()) @map("comment_idx")
  comment         String    @db.LongText
  parentCommentId Int?      @map("parent_comment_id")
  board           Board     @relation(fields: [boardId], references: [boardIdx])
  boardId         Int       @map("board_id")
  writer          User      @relation(fields: [writerId], references: [userIdx])
  writerId        Int       @map("writer_id")
  createdDt       DateTime  @default(now()) @map("created_dt")
  updatedDt       DateTime  @updatedAt @map("updated_dt")
  deletedDt       DateTime? @map("deleted_dt")

  @@map("comments")
}
